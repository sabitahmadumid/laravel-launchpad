<?php

namespace App\Services;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use Illuminate\Support\Facades\Cache;
use SabitAhmad\LaravelLaunchpad\Contracts\LicenseValidatorInterface;

class EnvatoLicenseChecker implements LicenseValidatorInterface
{
    protected Client $httpClient;

    public function __construct(Client $httpClient)
    {
        $this->httpClient = $httpClient;
    }

    public function validate(string $licenseKey, array $additionalData = []): array
    {
        // Cache the license validation for better performance
        $cacheKey = 'license_validation_' . md5($licenseKey);
        $cacheDuration = config('launchpad.license.cache_duration', 3600);

        return Cache::remember($cacheKey, $cacheDuration, function () use ($licenseKey, $additionalData) {
            return $this->performValidation($licenseKey, $additionalData);
        });
    }

    protected function performValidation(string $licenseKey, array $additionalData): array
    {
        try {
            // Example: Envato Market API validation
            // You can customize this logic based on your license server
            
            $response = $this->httpClient->get('https://api.envato.com/v3/market/author/sale', [
                'headers' => [
                    'Authorization' => 'Bearer ' . $licenseKey,
                    'User-Agent' => 'Your App Name',
                ],
                'query' => [
                    'code' => $licenseKey,
                ],
                'timeout' => config('launchpad.license.timeout', 30),
            ]);

            $data = json_decode($response->getBody()->getContents(), true);

            // Customize validation logic based on your requirements
            if (isset($data['buyer']) && isset($data['license'])) {
                return [
                    'valid' => true,
                    'message' => 'License is valid and active.',
                    'data' => [
                        'buyer' => $data['buyer'],
                        'license_type' => $data['license'],
                        'purchase_date' => $data['sold_at'] ?? null,
                    ],
                ];
            }

            return [
                'valid' => false,
                'message' => 'Invalid license key or license not found.',
            ];

        } catch (RequestException $e) {
            // Handle network errors
            if ($e->getResponse() && $e->getResponse()->getStatusCode() === 404) {
                return [
                    'valid' => false,
                    'message' => 'License key not found.',
                ];
            }

            return [
                'valid' => false,
                'message' => 'Unable to verify license. Please check your internet connection.',
            ];

        } catch (\Exception $e) {
            return [
                'valid' => false,
                'message' => 'License validation error: ' . $e->getMessage(),
            ];
        }
    }

    /**
     * Custom validation for your specific needs
     * 
     * You can add additional methods for:
     * - Domain validation
     * - License expiry checks
     * - Feature-based licensing
     * - etc.
     */
    protected function validateDomain(string $domain, array $allowedDomains): bool
    {
        return in_array($domain, $allowedDomains);
    }

    protected function checkLicenseExpiry(string $purchaseDate, int $validityDays = 365): bool
    {
        $expiryDate = strtotime($purchaseDate . " + {$validityDays} days");
        return time() < $expiryDate;
    }
}
